// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsCameraApi(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsCameraApi(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsCameraApi(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashCameraApi(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashCameraApi(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashCameraApi(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum CameraPosition: Int {
  case front = 0
  case back = 1
}

enum VideoCodec: Int {
  case prores422 = 0
  case prores422LT = 1
  case prores422Proxy = 2
  case hevc = 3
  case h264 = 4
}

enum StabilizationMode: Int {
  case cinematicExtendedEnhanced = 0
  case cinematicExtended = 1
  case cinematic = 2
  case auto = 3
  case off = 4
}

enum MicrophonePosition: Int {
  case external = 0
  case back = 1
  case bottom = 2
  case front = 3
}

enum ResolutionPreset: Int {
  case hd4K = 0
  case hd1080 = 1
  case hd720 = 2
  case sd540 = 3
  case sd480 = 4
}

enum ColorSpace: Int {
  case appleLog = 0
  case hlgBt2020 = 1
  case srgb = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct CameraConfiguration: Hashable {
  var videoCodec: VideoCodec
  var stabilizationMode: StabilizationMode
  var microphonePosition: MicrophonePosition
  var resolutionPreset: ResolutionPreset
  var colorSpace: ColorSpace
  var frameRate: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CameraConfiguration? {
    let videoCodec = pigeonVar_list[0] as! VideoCodec
    let stabilizationMode = pigeonVar_list[1] as! StabilizationMode
    let microphonePosition = pigeonVar_list[2] as! MicrophonePosition
    let resolutionPreset = pigeonVar_list[3] as! ResolutionPreset
    let colorSpace = pigeonVar_list[4] as! ColorSpace
    let frameRate = pigeonVar_list[5] as! Int64

    return CameraConfiguration(
      videoCodec: videoCodec,
      stabilizationMode: stabilizationMode,
      microphonePosition: microphonePosition,
      resolutionPreset: resolutionPreset,
      colorSpace: colorSpace,
      frameRate: frameRate
    )
  }
  func toList() -> [Any?] {
    return [
      videoCodec,
      stabilizationMode,
      microphonePosition,
      resolutionPreset,
      colorSpace,
      frameRate,
    ]
  }
  static func == (lhs: CameraConfiguration, rhs: CameraConfiguration) -> Bool {
    return deepEqualsCameraApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashCameraApi(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CameraError: Hashable {
  var code: String
  var message: String
  var details: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CameraError? {
    let code = pigeonVar_list[0] as! String
    let message = pigeonVar_list[1] as! String
    let details: String? = nilOrValue(pigeonVar_list[2])

    return CameraError(
      code: code,
      message: message,
      details: details
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      message,
      details,
    ]
  }
  static func == (lhs: CameraError, rhs: CameraError) -> Bool {
    return deepEqualsCameraApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashCameraApi(value: toList(), hasher: &hasher)
  }
}

private class CameraApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return CameraPosition(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return VideoCodec(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return StabilizationMode(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return MicrophonePosition(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ResolutionPreset(rawValue: enumResultAsInt)
      }
      return nil
    case 134:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ColorSpace(rawValue: enumResultAsInt)
      }
      return nil
    case 135:
      return CameraConfiguration.fromList(self.readValue() as! [Any?])
    case 136:
      return CameraError.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class CameraApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CameraPosition {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? VideoCodec {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? StabilizationMode {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? MicrophonePosition {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? ResolutionPreset {
      super.writeByte(133)
      super.writeValue(value.rawValue)
    } else if let value = value as? ColorSpace {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else if let value = value as? CameraConfiguration {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? CameraError {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class CameraApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CameraApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CameraApiPigeonCodecWriter(data: data)
  }
}

class CameraApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = CameraApiPigeonCodec(readerWriter: CameraApiPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CameraHostApi {
  func initializeCamera(viewId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func startRecording(viewId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func stopRecording(viewId: Int64, completion: @escaping (Result<String, Error>) -> Void)
  func pauseCamera(viewId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func resumeCamera(viewId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func disposeCamera(viewId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func getCameraConfiguration(viewId: Int64, completion: @escaping (Result<CameraConfiguration, Error>) -> Void)
  func setLut(viewId: Int64, lutData: FlutterStandardTypedData, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CameraHostApiSetup {
  static var codec: FlutterStandardMessageCodec { CameraApiPigeonCodec.shared }
  /// Sets up an instance of `CameraHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CameraHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_camera.CameraHostApi.initializeCamera\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let viewIdArg = args[0] as! Int64
        api.initializeCamera(viewId: viewIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeCameraChannel.setMessageHandler(nil)
    }
    let startRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_camera.CameraHostApi.startRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startRecordingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let viewIdArg = args[0] as! Int64
        api.startRecording(viewId: viewIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startRecordingChannel.setMessageHandler(nil)
    }
    let stopRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_camera.CameraHostApi.stopRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopRecordingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let viewIdArg = args[0] as! Int64
        api.stopRecording(viewId: viewIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopRecordingChannel.setMessageHandler(nil)
    }
    let pauseCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_camera.CameraHostApi.pauseCamera\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let viewIdArg = args[0] as! Int64
        api.pauseCamera(viewId: viewIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      pauseCameraChannel.setMessageHandler(nil)
    }
    let resumeCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_camera.CameraHostApi.resumeCamera\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      resumeCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let viewIdArg = args[0] as! Int64
        api.resumeCamera(viewId: viewIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      resumeCameraChannel.setMessageHandler(nil)
    }
    let disposeCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_camera.CameraHostApi.disposeCamera\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let viewIdArg = args[0] as! Int64
        api.disposeCamera(viewId: viewIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disposeCameraChannel.setMessageHandler(nil)
    }
    let getCameraConfigurationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_camera.CameraHostApi.getCameraConfiguration\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCameraConfigurationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let viewIdArg = args[0] as! Int64
        api.getCameraConfiguration(viewId: viewIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCameraConfigurationChannel.setMessageHandler(nil)
    }
    let setLutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_camera.CameraHostApi.setLut\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLutChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let viewIdArg = args[0] as! Int64
        let lutDataArg = args[1] as! FlutterStandardTypedData
        api.setLut(viewId: viewIdArg, lutData: lutDataArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setLutChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol CameraFlutterApiProtocol {
  func onCameraReady(viewId viewIdArg: Int64, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCameraError(viewId viewIdArg: Int64, error errorArg: CameraError, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onRecordingStarted(viewId viewIdArg: Int64, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onRecordingStopped(viewId viewIdArg: Int64, filePath filePathArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCameraConfiguration(viewId viewIdArg: Int64, configuration configurationArg: CameraConfiguration, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class CameraFlutterApi: CameraFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: CameraApiPigeonCodec {
    return CameraApiPigeonCodec.shared
  }
  func onCameraReady(viewId viewIdArg: Int64, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraReady\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([viewIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onCameraError(viewId viewIdArg: Int64, error errorArg: CameraError, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([viewIdArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onRecordingStarted(viewId viewIdArg: Int64, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStarted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([viewIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onRecordingStopped(viewId viewIdArg: Int64, filePath filePathArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStopped\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([viewIdArg, filePathArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onCameraConfiguration(viewId viewIdArg: Int64, configuration configurationArg: CameraConfiguration, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraConfiguration\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([viewIdArg, configurationArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
