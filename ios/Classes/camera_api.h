// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, CameraPosition) {
  CameraPositionFront = 0,
  CameraPositionBack = 1,
};

/// Wrapper for CameraPosition to allow for nullability.
@interface CameraPositionBox : NSObject
@property(nonatomic, assign) CameraPosition value;
- (instancetype)initWithValue:(CameraPosition)value;
@end

typedef NS_ENUM(NSUInteger, VideoCodec) {
  VideoCodecProres422 = 0,
  VideoCodecProres422LT = 1,
  VideoCodecProres422Proxy = 2,
  VideoCodecHevc = 3,
  VideoCodecH264 = 4,
};

/// Wrapper for VideoCodec to allow for nullability.
@interface VideoCodecBox : NSObject
@property(nonatomic, assign) VideoCodec value;
- (instancetype)initWithValue:(VideoCodec)value;
@end

typedef NS_ENUM(NSUInteger, StabilizationMode) {
  StabilizationModeCinematicExtendedEnhanced = 0,
  StabilizationModeCinematicExtended = 1,
  StabilizationModeCinematic = 2,
  StabilizationModeAuto = 3,
  StabilizationModeOff = 4,
};

/// Wrapper for StabilizationMode to allow for nullability.
@interface StabilizationModeBox : NSObject
@property(nonatomic, assign) StabilizationMode value;
- (instancetype)initWithValue:(StabilizationMode)value;
@end

typedef NS_ENUM(NSUInteger, MicrophonePosition) {
  MicrophonePositionExternal = 0,
  MicrophonePositionBack = 1,
  MicrophonePositionBottom = 2,
  MicrophonePositionFront = 3,
};

/// Wrapper for MicrophonePosition to allow for nullability.
@interface MicrophonePositionBox : NSObject
@property(nonatomic, assign) MicrophonePosition value;
- (instancetype)initWithValue:(MicrophonePosition)value;
@end

typedef NS_ENUM(NSUInteger, ResolutionPreset) {
  ResolutionPresetHd4K = 0,
  ResolutionPresetHd1080 = 1,
  ResolutionPresetHd720 = 2,
  ResolutionPresetSd540 = 3,
  ResolutionPresetSd480 = 4,
};

/// Wrapper for ResolutionPreset to allow for nullability.
@interface ResolutionPresetBox : NSObject
@property(nonatomic, assign) ResolutionPreset value;
- (instancetype)initWithValue:(ResolutionPreset)value;
@end

typedef NS_ENUM(NSUInteger, ColorSpace) {
  ColorSpaceAppleLog = 0,
  ColorSpaceHlgBt2020 = 1,
  ColorSpaceSrgb = 2,
};

/// Wrapper for ColorSpace to allow for nullability.
@interface ColorSpaceBox : NSObject
@property(nonatomic, assign) ColorSpace value;
- (instancetype)initWithValue:(ColorSpace)value;
@end

@class CameraConfiguration;
@class CameraError;

@interface CameraConfiguration : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithVideoCodec:(VideoCodec)videoCodec
    stabilizationMode:(StabilizationMode)stabilizationMode
    microphonePosition:(MicrophonePosition)microphonePosition
    resolutionPreset:(ResolutionPreset)resolutionPreset
    colorSpace:(ColorSpace)colorSpace
    frameRate:(NSInteger )frameRate;
@property(nonatomic, assign) VideoCodec videoCodec;
@property(nonatomic, assign) StabilizationMode stabilizationMode;
@property(nonatomic, assign) MicrophonePosition microphonePosition;
@property(nonatomic, assign) ResolutionPreset resolutionPreset;
@property(nonatomic, assign) ColorSpace colorSpace;
@property(nonatomic, assign) NSInteger  frameRate;
@end

@interface CameraError : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithCode:(NSString *)code
    message:(NSString *)message
    details:(nullable NSString *)details;
@property(nonatomic, copy) NSString * code;
@property(nonatomic, copy) NSString * message;
@property(nonatomic, copy, nullable) NSString * details;
@end

/// The codec used by all APIs.
NSObject<FlutterMessageCodec> *nullGetCameraApiCodec(void);

@protocol CameraHostApi
- (void)initializeCameraViewId:(NSInteger)viewId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)startRecordingViewId:(NSInteger)viewId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)stopRecordingViewId:(NSInteger)viewId completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)pauseCameraViewId:(NSInteger)viewId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)resumeCameraViewId:(NSInteger)viewId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)disposeCameraViewId:(NSInteger)viewId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)getCameraConfigurationViewId:(NSInteger)viewId completion:(void (^)(CameraConfiguration *_Nullable, FlutterError *_Nullable))completion;
- (void)setLutViewId:(NSInteger)viewId lutData:(FlutterStandardTypedData *)lutData completion:(void (^)(FlutterError *_Nullable))completion;
@end

extern void SetUpCameraHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraHostApi> *_Nullable api);

extern void SetUpCameraHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraHostApi> *_Nullable api, NSString *messageChannelSuffix);


@interface CameraFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger messageChannelSuffix:(nullable NSString *)messageChannelSuffix;
- (void)onCameraReadyViewId:(NSInteger)viewId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onCameraErrorViewId:(NSInteger)viewId error:(CameraError *)error completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onRecordingStartedViewId:(NSInteger)viewId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onRecordingStoppedViewId:(NSInteger)viewId filePath:(NSString *)filePath completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onCameraConfigurationViewId:(NSInteger)viewId configuration:(CameraConfiguration *)configuration completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onShotTypeUpdatedViewId:(NSInteger)viewId shotType:(NSString *)shotType confidence:(double)confidence completion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
