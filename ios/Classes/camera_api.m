// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "camera_api.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation CameraPositionBox
- (instancetype)initWithValue:(CameraPosition)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation VideoCodecBox
- (instancetype)initWithValue:(VideoCodec)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation StabilizationModeBox
- (instancetype)initWithValue:(StabilizationMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation MicrophonePositionBox
- (instancetype)initWithValue:(MicrophonePosition)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation ResolutionPresetBox
- (instancetype)initWithValue:(ResolutionPreset)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation ColorSpaceBox
- (instancetype)initWithValue:(ColorSpace)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface CameraConfiguration ()
+ (CameraConfiguration *)fromList:(NSArray<id> *)list;
+ (nullable CameraConfiguration *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface CameraError ()
+ (CameraError *)fromList:(NSArray<id> *)list;
+ (nullable CameraError *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation CameraConfiguration
+ (instancetype)makeWithVideoCodec:(VideoCodec)videoCodec
    stabilizationMode:(StabilizationMode)stabilizationMode
    microphonePosition:(MicrophonePosition)microphonePosition
    resolutionPreset:(ResolutionPreset)resolutionPreset
    colorSpace:(ColorSpace)colorSpace
    frameRate:(NSInteger )frameRate {
  CameraConfiguration* pigeonResult = [[CameraConfiguration alloc] init];
  pigeonResult.videoCodec = videoCodec;
  pigeonResult.stabilizationMode = stabilizationMode;
  pigeonResult.microphonePosition = microphonePosition;
  pigeonResult.resolutionPreset = resolutionPreset;
  pigeonResult.colorSpace = colorSpace;
  pigeonResult.frameRate = frameRate;
  return pigeonResult;
}
+ (CameraConfiguration *)fromList:(NSArray<id> *)list {
  CameraConfiguration *pigeonResult = [[CameraConfiguration alloc] init];
  VideoCodecBox *boxedVideoCodec = GetNullableObjectAtIndex(list, 0);
  pigeonResult.videoCodec = boxedVideoCodec.value;
  StabilizationModeBox *boxedStabilizationMode = GetNullableObjectAtIndex(list, 1);
  pigeonResult.stabilizationMode = boxedStabilizationMode.value;
  MicrophonePositionBox *boxedMicrophonePosition = GetNullableObjectAtIndex(list, 2);
  pigeonResult.microphonePosition = boxedMicrophonePosition.value;
  ResolutionPresetBox *boxedResolutionPreset = GetNullableObjectAtIndex(list, 3);
  pigeonResult.resolutionPreset = boxedResolutionPreset.value;
  ColorSpaceBox *boxedColorSpace = GetNullableObjectAtIndex(list, 4);
  pigeonResult.colorSpace = boxedColorSpace.value;
  pigeonResult.frameRate = [GetNullableObjectAtIndex(list, 5) integerValue];
  return pigeonResult;
}
+ (nullable CameraConfiguration *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [CameraConfiguration fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[VideoCodecBox alloc] initWithValue:self.videoCodec],
    [[StabilizationModeBox alloc] initWithValue:self.stabilizationMode],
    [[MicrophonePositionBox alloc] initWithValue:self.microphonePosition],
    [[ResolutionPresetBox alloc] initWithValue:self.resolutionPreset],
    [[ColorSpaceBox alloc] initWithValue:self.colorSpace],
    @(self.frameRate),
  ];
}
@end

@implementation CameraError
+ (instancetype)makeWithCode:(NSString *)code
    message:(NSString *)message
    details:(nullable NSString *)details {
  CameraError* pigeonResult = [[CameraError alloc] init];
  pigeonResult.code = code;
  pigeonResult.message = message;
  pigeonResult.details = details;
  return pigeonResult;
}
+ (CameraError *)fromList:(NSArray<id> *)list {
  CameraError *pigeonResult = [[CameraError alloc] init];
  pigeonResult.code = GetNullableObjectAtIndex(list, 0);
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  pigeonResult.details = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable CameraError *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [CameraError fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.code ?: [NSNull null],
    self.message ?: [NSNull null],
    self.details ?: [NSNull null],
  ];
}
@end

@interface nullCameraApiPigeonCodecReader : FlutterStandardReader
@end
@implementation nullCameraApiPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[CameraPositionBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 130: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[VideoCodecBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 131: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[StabilizationModeBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 132: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[MicrophonePositionBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 133: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[ResolutionPresetBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 134: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[ColorSpaceBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 135: 
      return [CameraConfiguration fromList:[self readValue]];
    case 136: 
      return [CameraError fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullCameraApiPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullCameraApiPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[CameraPositionBox class]]) {
    CameraPositionBox *box = (CameraPositionBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[VideoCodecBox class]]) {
    VideoCodecBox *box = (VideoCodecBox *)value;
    [self writeByte:130];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[StabilizationModeBox class]]) {
    StabilizationModeBox *box = (StabilizationModeBox *)value;
    [self writeByte:131];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[MicrophonePositionBox class]]) {
    MicrophonePositionBox *box = (MicrophonePositionBox *)value;
    [self writeByte:132];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[ResolutionPresetBox class]]) {
    ResolutionPresetBox *box = (ResolutionPresetBox *)value;
    [self writeByte:133];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[ColorSpaceBox class]]) {
    ColorSpaceBox *box = (ColorSpaceBox *)value;
    [self writeByte:134];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[CameraConfiguration class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[CameraError class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullCameraApiPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullCameraApiPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullCameraApiPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullCameraApiPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetCameraApiCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullCameraApiPigeonCodecReaderWriter *readerWriter = [[nullCameraApiPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpCameraHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraHostApi> *api) {
  SetUpCameraHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpCameraHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraHostApi.initializeCamera", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCameraApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeCameraViewId:completion:)], @"CameraHostApi api (%@) doesn't respond to @selector(initializeCameraViewId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_viewId = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api initializeCameraViewId:arg_viewId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraHostApi.startRecording", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCameraApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startRecordingViewId:completion:)], @"CameraHostApi api (%@) doesn't respond to @selector(startRecordingViewId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_viewId = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api startRecordingViewId:arg_viewId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraHostApi.stopRecording", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCameraApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopRecordingViewId:completion:)], @"CameraHostApi api (%@) doesn't respond to @selector(stopRecordingViewId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_viewId = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api stopRecordingViewId:arg_viewId completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraHostApi.pauseCamera", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCameraApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseCameraViewId:completion:)], @"CameraHostApi api (%@) doesn't respond to @selector(pauseCameraViewId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_viewId = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api pauseCameraViewId:arg_viewId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraHostApi.resumeCamera", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCameraApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeCameraViewId:completion:)], @"CameraHostApi api (%@) doesn't respond to @selector(resumeCameraViewId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_viewId = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api resumeCameraViewId:arg_viewId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraHostApi.disposeCamera", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCameraApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposeCameraViewId:completion:)], @"CameraHostApi api (%@) doesn't respond to @selector(disposeCameraViewId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_viewId = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api disposeCameraViewId:arg_viewId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraHostApi.getCameraConfiguration", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCameraApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCameraConfigurationViewId:completion:)], @"CameraHostApi api (%@) doesn't respond to @selector(getCameraConfigurationViewId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_viewId = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api getCameraConfigurationViewId:arg_viewId completion:^(CameraConfiguration *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraHostApi.setLut", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCameraApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLutViewId:lutData:completion:)], @"CameraHostApi api (%@) doesn't respond to @selector(setLutViewId:lutData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_viewId = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterStandardTypedData *arg_lutData = GetNullableObjectAtIndex(args, 1);
        [api setLutViewId:arg_viewId lutData:arg_lutData completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface CameraFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation CameraFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)onCameraReadyViewId:(NSInteger)arg_viewId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraReady", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetCameraApiCodec()];
  [channel sendMessage:@[@(arg_viewId)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onCameraErrorViewId:(NSInteger)arg_viewId error:(CameraError *)arg_error completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraError", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetCameraApiCodec()];
  [channel sendMessage:@[@(arg_viewId), arg_error ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onRecordingStartedViewId:(NSInteger)arg_viewId completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStarted", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetCameraApiCodec()];
  [channel sendMessage:@[@(arg_viewId)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onRecordingStoppedViewId:(NSInteger)arg_viewId filePath:(NSString *)arg_filePath completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStopped", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetCameraApiCodec()];
  [channel sendMessage:@[@(arg_viewId), arg_filePath ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onCameraConfigurationViewId:(NSInteger)arg_viewId configuration:(CameraConfiguration *)arg_configuration completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraConfiguration", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetCameraApiCodec()];
  [channel sendMessage:@[@(arg_viewId), arg_configuration ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onShotTypeUpdatedViewId:(NSInteger)arg_viewId shotType:(NSString *)arg_shotType confidence:(double)arg_confidence completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_camera.CameraFlutterApi.onShotTypeUpdated", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetCameraApiCodec()];
  [channel sendMessage:@[@(arg_viewId), arg_shotType ?: [NSNull null], @(arg_confidence)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

