// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum CameraPosition {
  front,
  back,
}

enum VideoCodec {
  prores422,
  prores422LT,
  prores422Proxy,
  hevc,
  h264,
}

enum StabilizationMode {
  cinematicExtendedEnhanced,
  cinematicExtended,
  cinematic,
  auto,
  off,
}

enum MicrophonePosition {
  external,
  back,
  bottom,
  front,
}

enum ResolutionPreset {
  hd4K,
  hd1080,
  hd720,
  sd540,
  sd480,
}

enum ColorSpace {
  appleLog,
  hlgBt2020,
  srgb,
}

class CameraConfiguration {
  CameraConfiguration({
    required this.position,
    required this.videoCodec,
    required this.stabilizationMode,
    required this.microphonePosition,
    required this.resolutionPreset,
    required this.colorSpace,
    required this.frameRate,
  });

  CameraPosition position;

  VideoCodec videoCodec;

  StabilizationMode stabilizationMode;

  MicrophonePosition microphonePosition;

  ResolutionPreset resolutionPreset;

  ColorSpace colorSpace;

  int frameRate;

  List<Object?> _toList() {
    return <Object?>[
      position,
      videoCodec,
      stabilizationMode,
      microphonePosition,
      resolutionPreset,
      colorSpace,
      frameRate,
    ];
  }

  Object encode() {
    return _toList();  }

  static CameraConfiguration decode(Object result) {
    result as List<Object?>;
    return CameraConfiguration(
      position: result[0]! as CameraPosition,
      videoCodec: result[1]! as VideoCodec,
      stabilizationMode: result[2]! as StabilizationMode,
      microphonePosition: result[3]! as MicrophonePosition,
      resolutionPreset: result[4]! as ResolutionPreset,
      colorSpace: result[5]! as ColorSpace,
      frameRate: result[6]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CameraConfiguration || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CameraError {
  CameraError({
    required this.code,
    required this.message,
    this.details,
  });

  String code;

  String message;

  String? details;

  List<Object?> _toList() {
    return <Object?>[
      code,
      message,
      details,
    ];
  }

  Object encode() {
    return _toList();  }

  static CameraError decode(Object result) {
    result as List<Object?>;
    return CameraError(
      code: result[0]! as String,
      message: result[1]! as String,
      details: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CameraError || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is CameraPosition) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is VideoCodec) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is StabilizationMode) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is MicrophonePosition) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is ResolutionPreset) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is ColorSpace) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is CameraConfiguration) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is CameraError) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CameraPosition.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : VideoCodec.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : StabilizationMode.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MicrophonePosition.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ResolutionPreset.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ColorSpace.values[value];
      case 135: 
        return CameraConfiguration.decode(readValue(buffer)!);
      case 136: 
        return CameraError.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CameraHostApi {
  /// Constructor for [CameraHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CameraHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initializeCamera(int viewId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.video_camera.CameraHostApi.initializeCamera$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[viewId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startRecording(int viewId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.video_camera.CameraHostApi.startRecording$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[viewId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> stopRecording(int viewId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.video_camera.CameraHostApi.stopRecording$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[viewId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<void> pauseCamera(int viewId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.video_camera.CameraHostApi.pauseCamera$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[viewId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> resumeCamera(int viewId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.video_camera.CameraHostApi.resumeCamera$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[viewId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disposeCamera(int viewId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.video_camera.CameraHostApi.disposeCamera$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[viewId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class CameraFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onCameraReady(int viewId);

  void onCameraError(int viewId, CameraError error);

  void onRecordingStarted(int viewId);

  void onRecordingStopped(int viewId, String filePath);

  static void setUp(CameraFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraReady$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraReady was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(arg_viewId != null,
              'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraReady was null, expected non-null int.');
          try {
            api.onCameraReady(arg_viewId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(arg_viewId != null,
              'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraError was null, expected non-null int.');
          final CameraError? arg_error = (args[1] as CameraError?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onCameraError was null, expected non-null CameraError.');
          try {
            api.onCameraError(arg_viewId!, arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStarted$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStarted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(arg_viewId != null,
              'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStarted was null, expected non-null int.');
          try {
            api.onRecordingStarted(arg_viewId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStopped$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStopped was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(arg_viewId != null,
              'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStopped was null, expected non-null int.');
          final String? arg_filePath = (args[1] as String?);
          assert(arg_filePath != null,
              'Argument for dev.flutter.pigeon.video_camera.CameraFlutterApi.onRecordingStopped was null, expected non-null String.');
          try {
            api.onRecordingStopped(arg_viewId!, arg_filePath!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
